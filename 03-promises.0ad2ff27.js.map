{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEW,IAAAC,KACK,QADAC,SAASC,cAAcF,IAwClCG,iBAAiB,UArCDC,IACnBA,EAAMC,iBACN,MACEC,UAAUC,MAAEA,EAAKC,KAAEA,EAAIC,OAAEA,IACzBL,EAAMM,cAER,IAAIC,EAAaJ,EAAMK,cACnBC,EAAYL,EAAKI,cACjBE,EAAcL,EAAOG,cAEzB,MAAMG,EAAgB,CAACC,EAAUC,IACxB,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQM,EAAA3B,GAAS4B,OAAOC,QAAQ,uBAAqBX,QAAiBC,QAEpEG,EAAKK,EAAA3B,GAAS4B,OAAOE,QAAQ,sBAAoBZ,QAAeC,OAAgB,GAEnFA,EAAW,IAIlB,IAAK,IAAIY,EAAI,EAAGA,GAAKf,EAAae,GAAK,EAAG,CACxC,IAAIb,EAAWa,EAEfd,EAAcC,EAAUL,GACrBmB,MAAKC,IAAUC,QAAQC,IAAIF,EAAM,IAEjCG,OAAMC,IAAUH,QAAQC,IAAIE,EAAM,IAGrCxB,GAA0BE,EAC1BG,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst qs = s => document.querySelector(s);\nconst form = qs(\".form\")\n\nconst handleSubmit = event => {\n  event.preventDefault();\n  const { \n    elements: { delay, step, amount } \n} = event.currentTarget;\n\n  let delayValue = delay.valueAsNumber;\n  let stepValue = step.valueAsNumber;\n  let amountValue = amount.valueAsNumber;\n\n  const createPromise = (position, delayValue) => {\n    return new Promise((resolve, reject) => {\n      const shouldResolve = Math.random() > 0.3;\n      setTimeout(() => {\n        if (shouldResolve) {\n          resolve(Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delayValue}ms`));\n        } else {\n          reject(Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delayValue}ms`));\n        }\n      }, delayValue);\n    });\n  }\n\n  for (let i = 1; i <= amountValue; i += 1) {\n    let position = i;\n\n    createPromise(position, delayValue)\n      .then(value => {console.log(value);\n      })\n      .catch(error => {console.log(error);\n      });\n      \n    delayValue = delayValue + stepValue;\n    position++;\n  }\n};\n\nform.addEventListener(\"submit\", handleSubmit);\n"],"names":["$7Y9D8","parcelRequire","s","document","querySelector","addEventListener","event","preventDefault","elements","delay","step","amount","currentTarget","delayValue1","valueAsNumber","stepValue","amountValue","createPromise","position","delayValue","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","$parcel$interopDefault","Notify","success","failure","i","then","value","console","log","catch","error"],"version":3,"file":"03-promises.0ad2ff27.js.map"}